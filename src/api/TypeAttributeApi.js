/**
 * Eviratec Entity API
 * [eviratec.com.au](https://www.eviratec.com.au) / [3xqt.co](http://www.3xqt.co)
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/Model1', 'model/UUserIDTypeListAttributes'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/Model1'), require('../model/UUserIDTypeListAttributes'));
  } else {
    // Browser globals (root is window)
    if (!root.EviratecEntity) {
      root.EviratecEntity = {};
    }
    root.EviratecEntity.TypeAttributeApi = factory(root.EviratecEntity.ApiClient, root.EviratecEntity.Model1, root.EviratecEntity.UUserIDTypeListAttributes);
  }
}(this, function(ApiClient, Model1, UUserIDTypeListAttributes) {
  'use strict';

  /**
   * TypeAttribute service.
   * @module api/TypeAttributeApi
   * @version 1.0.0
   */

  /**
   * Constructs a new TypeAttributeApi. 
   * @alias module:api/TypeAttributeApi
   * @class
   * @param {module:ApiClient} apiClient Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the createTypeAttribute operation.
     * @callback module:api/TypeAttributeApi~createTypeAttributeCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates a new TypeAttribute
     * 
     * @param {module:model/Model1} model The new **TypeAttribute** to add
     * @param {Number} userID The ID of the user who owns the resource
     * @param {String} className The EntityType&#39;s ClassName
     * @param {module:api/TypeAttributeApi~createTypeAttributeCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.createTypeAttribute = function(model, userID, className, callback) {
      var postBody = model;

      // verify the required parameter 'model' is set
      if (model == undefined || model == null) {
        throw new Error("Missing the required parameter 'model' when calling createTypeAttribute");
      }

      // verify the required parameter 'userID' is set
      if (userID == undefined || userID == null) {
        throw new Error("Missing the required parameter 'userID' when calling createTypeAttribute");
      }

      // verify the required parameter 'className' is set
      if (className == undefined || className == null) {
        throw new Error("Missing the required parameter 'className' when calling createTypeAttribute");
      }


      var pathParams = {
        'UserID': userID,
        'ClassName': className
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/U/{UserID}/T/{ClassName}/Attributes', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getTypeAttributeByAttributeKey operation.
     * @callback module:api/TypeAttributeApi~getTypeAttributeByAttributeKeyCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UUserIDTypeListAttributes} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieves an existing TypeAttribute
     * 
     * @param {Number} userID The ID of the user who owns the resource
     * @param {String} className The EntityType&#39;s ClassName
     * @param {String} attributeKey The Attribute&#39;s AttributeKey
     * @param {module:api/TypeAttributeApi~getTypeAttributeByAttributeKeyCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UUserIDTypeListAttributes}
     */
    this.getTypeAttributeByAttributeKey = function(userID, className, attributeKey, callback) {
      var postBody = null;

      // verify the required parameter 'userID' is set
      if (userID == undefined || userID == null) {
        throw new Error("Missing the required parameter 'userID' when calling getTypeAttributeByAttributeKey");
      }

      // verify the required parameter 'className' is set
      if (className == undefined || className == null) {
        throw new Error("Missing the required parameter 'className' when calling getTypeAttributeByAttributeKey");
      }

      // verify the required parameter 'attributeKey' is set
      if (attributeKey == undefined || attributeKey == null) {
        throw new Error("Missing the required parameter 'attributeKey' when calling getTypeAttributeByAttributeKey");
      }


      var pathParams = {
        'UserID': userID,
        'ClassName': className,
        'AttributeKey': attributeKey
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = UUserIDTypeListAttributes;

      return this.apiClient.callApi(
        '/U/{UserID}/T/{ClassName}/A/{AttributeKey}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the updateTypeAttributeByAttributeKey operation.
     * @callback module:api/TypeAttributeApi~updateTypeAttributeByAttributeKeyCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * 
     * @param {Number} userID The ID of the user who owns the resource
     * @param {String} className The EntityType&#39;s ClassName
     * @param {String} attributeKey The Attribute&#39;s AttributeKey
     * @param {module:api/TypeAttributeApi~updateTypeAttributeByAttributeKeyCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.updateTypeAttributeByAttributeKey = function(userID, className, attributeKey, callback) {
      var postBody = null;

      // verify the required parameter 'userID' is set
      if (userID == undefined || userID == null) {
        throw new Error("Missing the required parameter 'userID' when calling updateTypeAttributeByAttributeKey");
      }

      // verify the required parameter 'className' is set
      if (className == undefined || className == null) {
        throw new Error("Missing the required parameter 'className' when calling updateTypeAttributeByAttributeKey");
      }

      // verify the required parameter 'attributeKey' is set
      if (attributeKey == undefined || attributeKey == null) {
        throw new Error("Missing the required parameter 'attributeKey' when calling updateTypeAttributeByAttributeKey");
      }


      var pathParams = {
        'UserID': userID,
        'ClassName': className,
        'AttributeKey': attributeKey
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/U/{UserID}/T/{ClassName}/A/{AttributeKey}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
