/**
 * Eviratec Entity API
 * [eviratec.com.au](https://www.eviratec.com.au) / [3xqt.co](http://www.3xqt.co)
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/InlineResponse200', 'model/Model'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/InlineResponse200'), require('../model/Model'));
  } else {
    // Browser globals (root is window)
    if (!root.EviratecEntityApi) {
      root.EviratecEntityApi = {};
    }
    root.EviratecEntityApi.EntityTypeApi = factory(root.EviratecEntityApi.ApiClient, root.EviratecEntityApi.InlineResponse200, root.EviratecEntityApi.Model);
  }
}(this, function(ApiClient, InlineResponse200, Model) {
  'use strict';

  /**
   * EntityType service.
   * @module api/EntityTypeApi
   * @version 1.0.0
   */

  /**
   * Constructs a new EntityTypeApi. 
   * @alias module:api/EntityTypeApi
   * @class
   * @param {module:ApiClient} apiClient Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the createEntityType operation.
     * @callback module:api/EntityTypeApi~createEntityTypeCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates a new EntityType
     * 
     * @param {module:model/Model} model The new **EntityType** to add
     * @param {Number} userID The ID of the user who owns the resource
     * @param {module:api/EntityTypeApi~createEntityTypeCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.createEntityType = function(model, userID, callback) {
      var postBody = model;

      // verify the required parameter 'model' is set
      if (model == undefined || model == null) {
        throw new Error("Missing the required parameter 'model' when calling createEntityType");
      }

      // verify the required parameter 'userID' is set
      if (userID == undefined || userID == null) {
        throw new Error("Missing the required parameter 'userID' when calling createEntityType");
      }


      var pathParams = {
        'UserID': userID
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/U/{UserID}/Types', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getEntityTypeByClassName operation.
     * @callback module:api/EntityTypeApi~getEntityTypeByClassNameCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse200} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieves an existing EntityType
     * 
     * @param {Number} userID The ID of the user who owns the resource
     * @param {String} className The EntityType&#39;s ClassName
     * @param {module:api/EntityTypeApi~getEntityTypeByClassNameCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse200}
     */
    this.getEntityTypeByClassName = function(userID, className, callback) {
      var postBody = null;

      // verify the required parameter 'userID' is set
      if (userID == undefined || userID == null) {
        throw new Error("Missing the required parameter 'userID' when calling getEntityTypeByClassName");
      }

      // verify the required parameter 'className' is set
      if (className == undefined || className == null) {
        throw new Error("Missing the required parameter 'className' when calling getEntityTypeByClassName");
      }


      var pathParams = {
        'UserID': userID,
        'ClassName': className
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = InlineResponse200;

      return this.apiClient.callApi(
        '/U/{UserID}/T/{ClassName}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getEntityTypeList operation.
     * @callback module:api/EntityTypeApi~getEntityTypeListCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/InlineResponse200>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieves a list of Types
     * 
     * @param {Number} userID The ID of the user who owns the resource
     * @param {module:api/EntityTypeApi~getEntityTypeListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/InlineResponse200>}
     */
    this.getEntityTypeList = function(userID, callback) {
      var postBody = null;

      // verify the required parameter 'userID' is set
      if (userID == undefined || userID == null) {
        throw new Error("Missing the required parameter 'userID' when calling getEntityTypeList");
      }


      var pathParams = {
        'UserID': userID
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = [InlineResponse200];

      return this.apiClient.callApi(
        '/U/{UserID}/Type/List', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
