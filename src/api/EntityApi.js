/**
 * Eviratec Entity API
 * [eviratec.com.au](https://www.eviratec.com.au) / [3xqt.co](http://www.3xqt.co)
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/InlineResponse2001', 'model/Model2'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/InlineResponse2001'), require('../model/Model2'));
  } else {
    // Browser globals (root is window)
    if (!root.EviratecEntityApi) {
      root.EviratecEntityApi = {};
    }
    root.EviratecEntityApi.EntityApi = factory(root.EviratecEntityApi.ApiClient, root.EviratecEntityApi.InlineResponse2001, root.EviratecEntityApi.Model2);
  }
}(this, function(ApiClient, InlineResponse2001, Model2) {
  'use strict';

  /**
   * Entity service.
   * @module api/EntityApi
   * @version 1.0.0
   */

  /**
   * Constructs a new EntityApi. 
   * @alias module:api/EntityApi
   * @class
   * @param {module:ApiClient} apiClient Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the createEntity operation.
     * @callback module:api/EntityApi~createEntityCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates a new Entity
     * 
     * @param {module:model/Model2} model The new **Entity** to add
     * @param {Number} userID The ID of the user who owns the resource
     * @param {String} className The EntityType&#39;s ClassName
     * @param {module:api/EntityApi~createEntityCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.createEntity = function(model, userID, className, callback) {
      var postBody = model;

      // verify the required parameter 'model' is set
      if (model == undefined || model == null) {
        throw new Error("Missing the required parameter 'model' when calling createEntity");
      }

      // verify the required parameter 'userID' is set
      if (userID == undefined || userID == null) {
        throw new Error("Missing the required parameter 'userID' when calling createEntity");
      }

      // verify the required parameter 'className' is set
      if (className == undefined || className == null) {
        throw new Error("Missing the required parameter 'className' when calling createEntity");
      }


      var pathParams = {
        'UserID': userID,
        'ClassName': className
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/U/{UserID}/T/{ClassName}/Entities', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteEntityByEntityID operation.
     * @callback module:api/EntityApi~deleteEntityByEntityIDCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes an existing Entity
     * 
     * @param {Number} userID The ID of the user who owns the resource
     * @param {String} className The EntityType&#39;s ClassName
     * @param {Number} entityID The Entity&#39;s ID
     * @param {module:api/EntityApi~deleteEntityByEntityIDCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.deleteEntityByEntityID = function(userID, className, entityID, callback) {
      var postBody = null;

      // verify the required parameter 'userID' is set
      if (userID == undefined || userID == null) {
        throw new Error("Missing the required parameter 'userID' when calling deleteEntityByEntityID");
      }

      // verify the required parameter 'className' is set
      if (className == undefined || className == null) {
        throw new Error("Missing the required parameter 'className' when calling deleteEntityByEntityID");
      }

      // verify the required parameter 'entityID' is set
      if (entityID == undefined || entityID == null) {
        throw new Error("Missing the required parameter 'entityID' when calling deleteEntityByEntityID");
      }


      var pathParams = {
        'UserID': userID,
        'ClassName': className,
        'EntityID': entityID
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/U/{UserID}/T/{ClassName}/E/{EntityID}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getEntityByEntityID operation.
     * @callback module:api/EntityApi~getEntityByEntityIDCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse2001} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieves an existing Entity
     * 
     * @param {Number} userID The ID of the user who owns the resource
     * @param {String} className The EntityType&#39;s ClassName
     * @param {Number} entityID The Entity&#39;s ID
     * @param {module:api/EntityApi~getEntityByEntityIDCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse2001}
     */
    this.getEntityByEntityID = function(userID, className, entityID, callback) {
      var postBody = null;

      // verify the required parameter 'userID' is set
      if (userID == undefined || userID == null) {
        throw new Error("Missing the required parameter 'userID' when calling getEntityByEntityID");
      }

      // verify the required parameter 'className' is set
      if (className == undefined || className == null) {
        throw new Error("Missing the required parameter 'className' when calling getEntityByEntityID");
      }

      // verify the required parameter 'entityID' is set
      if (entityID == undefined || entityID == null) {
        throw new Error("Missing the required parameter 'entityID' when calling getEntityByEntityID");
      }


      var pathParams = {
        'UserID': userID,
        'ClassName': className,
        'EntityID': entityID
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = InlineResponse2001;

      return this.apiClient.callApi(
        '/U/{UserID}/T/{ClassName}/E/{EntityID}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getEntityList operation.
     * @callback module:api/EntityApi~getEntityListCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/InlineResponse2001>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieves a list of Entities
     * 
     * @param {Number} userID The ID of the user who owns the resource
     * @param {String} className The EntityType&#39;s ClassName
     * @param {module:api/EntityApi~getEntityListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/InlineResponse2001>}
     */
    this.getEntityList = function(userID, className, callback) {
      var postBody = null;

      // verify the required parameter 'userID' is set
      if (userID == undefined || userID == null) {
        throw new Error("Missing the required parameter 'userID' when calling getEntityList");
      }

      // verify the required parameter 'className' is set
      if (className == undefined || className == null) {
        throw new Error("Missing the required parameter 'className' when calling getEntityList");
      }


      var pathParams = {
        'UserID': userID,
        'ClassName': className
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = [InlineResponse2001];

      return this.apiClient.callApi(
        '/U/{UserID}/T/{ClassName}/Entity/List', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
